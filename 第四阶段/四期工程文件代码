四期工程文件代码

---

具体展示图片我更新放在仓库[preciouswxe/Pray (github.com)](https://github.com/preciouswxe/Pray)

文件夹名是四期笔记和图片

代码全都在finaltask文件夹里

---

## 一、主程序

```go
package main

import (
    "database/sql"
    "fmt"
    "html/template"
    "log"
    "net/http"

    "github.com/gin-gonic/gin"
    _ "github.com/go-sql-driver/mysql"
)

// 定义一个全局对象db
var db *sql.DB

// 定义一个初始化数据库的函数
func initDB() (err error) {
    // DSN:Data Source Name
    dsn := "root:wxe13867187633@tcp(127.0.0.1:3306)/fhq?charset=utf8mb4&parseTime=True"
    // 不会校验账号密码是否正确
    // 注意！！！这里不要使用:=，我们是给全局变量赋值，然后在main函数中使用全局变量db
    db, err = sql.Open("mysql", dsn)
    if err != nil {
        return err
    }
    // 尝试与数据库建立连接（校验dsn是否正确）
    err = db.Ping()
    if err != nil {
        return err
    }
    return nil
}

type User struct {
    Id   int
    Age  int
    Name string
}

// 查询单条数据示例
func queryRowDemo(id string) (User, error) {
    sqlStr := "select id, name, age from `user` where id=?"
    var u User
    // 非常重要：确保QueryRow之后调用Scan方法，否则持有的数据库链接不会被释放
    err := db.QueryRow(sqlStr, id).Scan(&u.Id, &u.Name, &u.Age)
    if err != nil {
        fmt.Printf("scan failed, err:%v\n", err)
        return User{}, err
    }
    return u, nil
}

// 插入数据
func insertRowDemo(id, name, age string) {
    sqlStr := "insert into `user`(id,name,age) values (?,?,?)"
    ret, err := db.Exec(sqlStr, id, name, age) //后俩就是放变量的地方
    if err != nil {
        fmt.Printf("insert failed, err:%v\n", err)
        return
    }
    theID, err := ret.LastInsertId() // 新插入数据的id
    if err != nil {
        fmt.Printf("get lastinsert ID failed, err:%v\n", err)
        return
    }
    fmt.Printf("insert success, the id is %d.\n", theID)
}

// 更新数据
func updateRowDemo(id, name, age string) {
    sqlStr := "update `user` set age=?,name=? where id = ?"
    ret, err := db.Exec(sqlStr, age, name, id)
    if err != nil {
        fmt.Printf("update failed, err:%v\n", err)
        return
    }
    n, err := ret.RowsAffected() // 操作影响的行数
    if err != nil {
        fmt.Printf("get RowsAffected failed, err:%v\n", err)
        return
    }
    fmt.Printf("update success, affected rows:%d\n", n)
}

// 删除数据
func deleteRowDemo(id string) bool {
    sqlStr := "delete from `user` where id = ?"
    ret, err := db.Exec(sqlStr, id)
    if err != nil {
        fmt.Printf("delete failed, err:%v\n", err)
        return false
    }
    n, err := ret.RowsAffected() // 操作影响的行数
    if err != nil {
        fmt.Printf("get RowsAffected failed, err:%v\n", err)
        return false
    }
    if n == 0 {
        fmt.Printf("delete failed, student with ID %s does not exist\n", id)
        return false
    }
    fmt.Printf("delete success, affected rows: %d\n", n)
    return true
}

func main() {
    err := initDB() // 调用输出化数据库的函数
    if err != nil {
        fmt.Printf("init db failed,err:%v\n", err)
        return
    }
    fmt.Printf("successfully link!")

    gin.SetMode(gin.ReleaseMode)

    r := gin.Default()

    //加载静态文件
    r.Static("/statics", "./finaltask/statics")

    // 添加跨域配置  调整的时候多加了本来是拿来处理change路由fetch不了的问题 结果是表名忘带了
    // 添加 CORS 中间件
    r.Use(func(c *gin.Context) {
        c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
        c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
        c.Writer.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
        c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")

        if c.Request.Method == "OPTIONS" {
            c.AbortWithStatus(200)
            return
        }

        c.Next()
    })

    //上传表格数据
    r.GET("/", func(c *gin.Context) {
        rows, err := db.Query("SELECT id,name,age FROM `user`")
        if err != nil {
            log.Fatal(err)
        }
        defer rows.Close()

        var users []User
        for rows.Next() {
            var user User
            err := rows.Scan(&user.Id, &user.Name, &user.Age)
            if err != nil {
                log.Fatal(err)
            }
            users = append(users, user)

            /*
                c.HTML(http.StatusOK,"finaltask/index.html",nil)
            */
        }

        tmpl := template.Must(template.ParseFiles("finaltask/index.html"))
        err = tmpl.Execute(c.Writer, users)
        if err != nil {
            log.Fatal(err)
        }

    })

    // GET 请求处理 /add.html 页面
    r.GET("/add.html", func(c *gin.Context) {
        r.LoadHTMLFiles("./finaltask/add.html")
        c.HTML(http.StatusOK, "add.html", gin.H{
            "title": "Add Page",
        })
    })
    // GET 请求处理 /update.html 页面
    r.GET("/update.html", func(c *gin.Context) {

        r.LoadHTMLFiles("./finaltask/update.html")
        c.HTML(http.StatusOK, "update.html", gin.H{
            "title": "Update form",
        })

    })

    //增加
    r.POST("/login", func(c *gin.Context) {
        // 解析表单数据
        err := c.Request.ParseForm()
        if err != nil {
            c.String(400, "Failed to parse form")
            return
        }

        // 获取表单数据
        ID := c.PostForm("id")
        Name := c.PostForm("name")
        Age := c.PostForm("age")

        insertRowDemo(ID, Name, Age)

        // 插入数据完成后重定向到主页
        c.Redirect(http.StatusFound, "/") // 重定向到主页或其他页面
    })

    //查询
    r.GET("/question", func(c *gin.Context) {
        // 从 URL 参数中获取用户输入的学号
        query := c.Query("query")

        // 调用查询函数并将结果传递给前端页面
        user, err := queryRowDemo(query)
        if err != nil {
            fmt.Printf("We can't find the %v student", query) //没有找到学号xxx的学生
            // 处理错误
        }

        r.LoadHTMLFiles("./finaltask/change.html")
        // 将查询结果传递到前端页面
        c.HTML(http.StatusOK, "change.html", gin.H{
            "user": user,
        })

        // 查询数据完成后重定向到主页
        /*c.Redirect(http.StatusFound, "/") // 重定向到主页或其他页面*/
    })

    //来自主路由的删除
    r.POST("/delete", func(c *gin.Context) {
        var requestData map[string]interface{}

        err := c.BindJSON(&requestData) // 将 HTTP 请求中的 JSON 数据绑定到 requestData 变量中
        if err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": "无效的请求数据"})
            return
        }

        ID, ok := requestData["id"].(string)
        if !ok {
            c.JSON(http.StatusBadRequest, gin.H{"error": "无效的学生ID"})
            return
        }

        fmt.Println("将要删除的学生ID为:", ID) // 打印即将删除的学生ID

        success := deleteRowDemo(ID) //进行删除

        if success {
            c.JSON(http.StatusOK, gin.H{"message": "学生删除成功"})
        } else {
            c.JSON(http.StatusNotFound, gin.H{"message": "学生ID不存在"})
        }
    })

    //来自change小页面的删除
    r.POST("/changedelete", func(c *gin.Context) {
        //解析change页面
        r.LoadHTMLFiles("./finaltask/change.html")
        fmt.Println("接收到 /changedelete 请求")

        var requestData map[string]interface{}

        err := c.BindJSON(&requestData) // 将 HTTP 请求中的 JSON 数据绑定到 requestData 变量中
        if err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": "无效的请求数据"})
            return
        }

        ID, ok := requestData["id"].(string)
        if !ok {
            c.JSON(http.StatusBadRequest, gin.H{"error": "无效的学生ID"})
            return
        }

        fmt.Println("将要删除的学生ID为:", ID) // 打印即将删除的学生ID

        success := deleteRowDemo(ID) //进行删除

        if success {
            c.JSON(http.StatusOK, gin.H{"message": "学生删除成功"})
        } else {
            c.JSON(http.StatusNotFound, gin.H{"message": "学生ID不存在"})
        }

    })

    //修改按键
    r.POST("/update", func(c *gin.Context) {
        // 解析表单数据
        fmt.Println("接收到update请求")

        /*
            err := c.Request.ParseForm()
            if err != nil {
                c.String(400, "Failed to parse form")
                return
            } */

        fmt.Println("URL:", c.Request.URL)

        // 获取表单数据
        ID := c.PostForm("id") 
        Name := c.PostForm("name")
        Age := c.PostForm("age")

        fmt.Println("ID:", ID)   //用于在终端打印是否接受
        fmt.Println("Name:", Name)
        fmt.Println("Age:", Age)

        updateRowDemo(ID, Name, Age)

        // 插入数据完成后重定向到主页
        c.Redirect(http.StatusFound, "/") // 重定向到主页或其他页面

    })

    r.Run(":9000")
}
```

部分代码用于在终端获取数据调整

因为增删改查网上搜不到go的资料，基本上就是一个请求对应一个响应，写的有点繁杂，分了几天写的

不过搞了好久，四个功能都能实现。

其中修改(update.html)和删除(delete路由)可以通过按键进行，添加则是选择超文本链接了会跳到add.html，查询就是搜索框会跳到change.html。因为id参数的传递需要，所以后续文件还有一些js代码。

---

## 二、主路由的html (删除在这一起)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="statics/logoIcon.png"/>
    <link rel="stylesheet" href="statics/button.css">   <!-- 引入按钮的样式表 -->
    <title>finaltask_student system</title>

    <style>
        p
        {
            text-align:center;
        } 
        body{
        margin: 0;
        /*object-fit: cover;*/
        padding: 0;

        position: relative;
        }
        .background{
        position:fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("statics/R-C.jpg")no-repeat center center/cover;
        /*background-attachment: fixed;
        background-size: cover; /* 可选，用于确保背景图片覆盖整个屏幕 */
        /*background-repeat: no-repeat; /* 不重复 */
        /*background-position:  center center; /* 居中 */
        /*background-size: 100% 100%; /* 覆盖整个元素 */
        /*background-attachment: fixed;*/
        /*background-repeat:no-repeat;*/
        z-index: -1; /* 将 z-index 设置为负值，使背景图片位于内容下方 */
        }
    </style>

    <!--设置头部图片位置、色块和阴影以及点击效果-->
    <style>   
        .img{
            display: inline;
            float: left;
        }
        .topnav {
        /*overflow: hidden;*/
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        text-align: center;
        height: 45px;
        background-image: linear-gradient(270deg, #e38fcf,rgb(245, 242, 242));
        box-shadow:1px 2px 5px #867979;
        }

        /* 导航链接 */
        .topnav a {
        float: right;
        display: block;
        color: #f2f2f2;
        text-align: center;
        padding: 10px 16px;
        text-decoration: none;
    }

      /* 链接 - 修改颜色 */
      .topnav a:hover {
        background-color: #efd1e7;
        color: black;
    }
    </style>

    <!--表格-->
    <style>
        table {
            margin: 0 auto; /* 设置表格水平居中 */
            text-align: center; /* 设置表格内部内容水平居中 */
            background-color:rgba(244, 245, 245, 0.587);
            box-shadow:1px 2px 5px #867979;
        }
        th, td {
            padding: 10px; /* 设置单元格内边距 */
        }
        th:nth-child(1) {
        background-color: #f3dbe8; /* 第一列的背景颜色 */
        color: rgb(109, 105, 105); /* 第一列文字颜色为白色 */
        width: 200px;
        }

        th:nth-child(2) {
        background-color: #ebc1e0; /* 第二列的背景颜色 */
        color: rgb(109, 105, 105); /* 第二列文字颜色为白色 */
        width: 200px;
        }

        th:nth-child(3) {
        background-color: #dba0cd; /* 第三列的背景颜色 */
        color: rgb(109, 105, 105); /* 第三列文字颜色为白色 */
        width: 200px;
        }

        th:nth-child(4) {
        background-color: #ad5c9a; /* 第三列的背景颜色 */
        color: rgb(204, 200, 200); /* 第三列文字颜色为白色 */
        width: 200px;
        }
    </style>


</head>

<body>
    <div class="background"></div>
    <div class="topnav">
        <div class="img">
            <img src="statics/logoIcon.png" style="height: 60px;position: relative; top: px; left: 250px;" alt="无法显示">
        </div>
        <a href="#">排名</a>
        <a href="#">评测记录</a>
        <a href="#">讨论</a>
        <a href="#">作业</a>
        <a href="#">比赛</a>
        <a href="#">训练</a>
        <a href="#">题库</a>
        <a href="#">首页</a>
        <a href="http://hdufhq.cn:8888/"><p  style="color:#521154;position:fixed;top:0px;left:310px;">孵化器实验室</p></a>
    </div>

    <br><br><br><br>

    <form action="/question" method="get">
        <input type="text" id="query" name="query" placeholder="  查询请输入20位内数字学号" 
            style="position:relative;left: 650px;width:400px;height:35px;
            box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.1);
            border-top: none;border-left: none;" required>   
        <button class="button" style="position:relative;left: 610px;background-color:#e38fcf;">Search</button>
        <img src="statics/sousuo.jpg" style="height: 35px;position: relative;width: 40px;left:463px;top:13px;opacity: 0.2;"><br><br>
    </form>

    <h1 style="text-align: center;color:#ca75a1;font-family: KaiTi;">学生信息系统</h1>
    <p style="font-family:'Times New Roman', Times, serif;text-align: center;font-size:14px;color:rgb(186, 157, 178);"><i>DATABASE: localhost mysql</i></p>
    <table border="1" style="text-align: center;box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);">
        <tr>
            <th>学号</th>
            <th>姓名</th>
            <th>年龄</th>
            <th>操作</th>
        </tr>
        {{range .}}
        <tr>
            <td>{{.Id}}</td>
            <td>{{.Name}}</td>
            <td>{{.Age}}</td>
            <td>
                <a href="update.html?id={{.Id}}" class="button" style="background-color:rgb(138, 107, 185)">修改</a>
                <button onclick="confirmDelete(this)" class="button" data-id="{{.Id}}" style="background-color:rgb(145, 168, 223)">删除</button>
            </td>
        </tr>
        {{end}}
    </table>

    <script>
        function confirmDelete(button) {
            var id = button.getAttribute('data-id');

            if (confirm("确定要删除该行数据吗？")) {
                // 用户确认删除，可以将 id 发送到后端进行处理
                console.log("用户确认删除,ID:" + id);

                const data = { id: id };
                // 这里可以继续添加发送到后端的逻辑
                fetch('http://127.0.0.1:9000/delete', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                })
                .then(response => {
                    if (response.ok) {
                      console.log('学生删除成功');
                      window.location.reload(); // 刷新当前页面
                    } else {
                        console.error('删除失败');
                    }
                })
                .catch(error => {
                    console.error('发生错误：', error);
                });

            } else {
                // 用户取消删除
                console.log("用户取消删除");
            }
        }
    </script>

    <a href="add.html" style="text-align: center;color:#f2f2f2;"><h3>去添加？</h3></a>

    <p style="text-align: center;left:710px;position:fixed;bottom:10px;font-size:12px;color:rgb(192, 178, 178);">Copyright © 2024 prexiouswxe.Powered by fhq. 
      <br> All rights reserved.</p>
</body>
</html>
```

数据库每条数据都会以表格呈现，而且每一行后面都有两个按键，一个删除一个修改，我调了很久，在我的电脑上已经都可以被实现。

不过因为mysql问题，所以在其他人电脑上应该需要配置和新建user表（得带`号引起来 因为跟关键字重了）

---

## 三、查询页面的html

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="statics/button.css">   <!-- 引入按钮的样式表 -->
    <title>Student Information</title>

    <style>
        .background{
            position:fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url("statics/R-C.jpg")no-repeat center center/cover;
            /*background-attachment: fixed;
            background-size: cover; /* 可选，用于确保背景图片覆盖整个屏幕 */
            /*background-repeat: no-repeat; /* 不重复 */
            /*background-position:  center center; /* 居中 */
            /*background-size: 100% 100%; /* 覆盖整个元素 */
            /*background-attachment: fixed;*/
            /*background-repeat:no-repeat;*/
            z-index: -1; /* 将 z-index 设置为负值，使背景图片位于内容下方 */
        }
        p{
            text-align: center;
        }

        table {
            margin: 0 auto; /* 设置表格水平居中 */
            text-align: center; /* 设置表格内部内容水平居中 */
            background-color:rgba(244, 245, 245, 0.694);
            box-shadow:1px 2px 5px #867979;
        }
        th, td {
            padding: 10px; /* 设置单元格内边距 */
        }
        th:nth-child(1) {
        background-color: #f3dbe8; /* 第一列的背景颜色 */
        color: rgb(109, 105, 105); /* 第一列文字颜色为白色 */
        width: 200px;
        }

        th:nth-child(2) {
        background-color: #ebc1e0; /* 第二列的背景颜色 */
        color: rgb(109, 105, 105); /* 第二列文字颜色为白色 */
        width: 200px;
        }

        th:nth-child(3) {
        background-color: #dba0cd; /* 第三列的背景颜色 */
        color: rgb(109, 105, 105); /* 第三列文字颜色为白色 */
        width: 200px;
        }

        th:nth-child(4) {
        background-color: #ad5c9a; /* 第三列的背景颜色 */
        color: rgb(204, 200, 200); /* 第三列文字颜色为白色 */
        width: 400px;
        }
    </style>

<!--按钮设置样式-->
</head>

<body>
    <div class="background"></div>
    <h1 style="text-align: center;color:#e8cfdc;">Search Result</h1>
    <table border="1" style="text-align: center;box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);">
        <tr>
            <th>学号</th>
            <th>姓名</th>
            <th>年龄</th>
            <th>操作</th>
        </tr>
        <tr>
            <td>{{.user.Id}}</td>
            <td>{{.user.Name}}</td>
            <td>{{.user.Age}}</td>
            <td>
                <a href="update.html?id={{.user.Id}}" class="button" style="background-color:rgb(138, 107, 185)">修改</a>
                <button onclick="confirmDelete(this)" class="button" data-id="{{.user.Id}}" style="background-color:rgb(145, 168, 223)">删除</button>
                <a href="/" class="button" style="background-color:rgb(145, 217, 223)">返回</a>
            </td>
        </tr>
    </table>

    <script>
        function confirmDelete(button) {
            var id = button.getAttribute('data-id');

            if (confirm("确定要删除该行数据吗？")) {
                // 用户确认删除，可以将 id 发送到后端进行处理
                console.log("用户确认删除,ID:" + id);

                const data = { id: id };
                // 这里可以继续添加发送到后端的逻辑
                fetch('http://127.0.0.1:9000/changedelete', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                })
                .then(response => {
                    if (response.ok) {
                      console.log('学生删除成功');
                      //回到主界面
                      window.location.href = 'http://127.0.0.1:9000';
                    } else {
                        console.error('删除失败');
                    }
                })
                .catch(error => {
                    console.error('发生错误：', error);
                });

            } else {
                // 用户取消删除
                console.log("用户取消删除");
            }
        }
    </script>

    <a href="add.html" style="text-align: center;color:#ffffff;"><h3>去添加？</h3></a>

    <p style="text-align: center;left:750px;position:fixed;bottom:10px;font-size:12px;color:rgb(192, 178, 178);">Copyright © 2024 prexiouswxe.Powered by fhq. 
    <br> All rights reserved.</p>
</body>
</html>
```

---

## 四、增加的html

```html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add finaltask_student</title>
  <style>
    .background{
        position:fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("statics/R-C.jpg")no-repeat center center/cover;
        /*background-attachment: fixed;
        background-size: cover; /* 可选，用于确保背景图片覆盖整个屏幕 */
        /*background-repeat: no-repeat; /* 不重复 */
        /*background-position:  center center; /* 居中 */
        /*background-size: 100% 100%; /* 覆盖整个元素 */
        /*background-attachment: fixed;*/
        /*background-repeat:no-repeat;*/
        z-index: -1; /* 将 z-index 设置为负值，使背景图片位于内容下方 */
        }
    #login_box {
      width: 20%;
      height: 400px;
      background-color: #f8ededbc;
      margin: auto;
      margin-top: 10%;
      text-align: center;
      border-radius: 10px;
      padding: 50px 50px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    h2 {
      color: #efb1d1d3;
      margin-top: 5%;
    }

    #input-box {
      margin-top: 5%;
    }

    span {
      color: #fff;
    }

    input {
      border: 0;
      width: 60%;
      font-size: 15px;
      color: #fff;
      background: transparent;
      border-bottom: 2px solid #cdc1c1;  /*横线颜色*/
      padding: 5px 10px;
      outline: none;
      margin-top: 10px;
    }

    button {
      margin-top: 50px;
      width: 60%;
      height: 30px;
      border-radius: 10px;
      border: 0;
      color: #d0caca;
      text-align: center;
      line-height: 30px;
      font-size: 15px;
      background-image: linear-gradient(to right, #30cfd0, #330867);
    }

    #sign_up {
      margin-top: 45%;
      margin-left: 60%;
    }

    a {
      color: #d0bcbc;
    }
  </style>
</head>

<body>
    <div class="background"></div>
    <div id="login_box">
    <h2>New Student</h2>

    <form action="/login" method="post" novalidate autocomplete="off">

      <div class="input-box">
      <input type="text" name="id" placeholder="请输入新增学号">
      </div>
      <div class="input_box">
      <input type="text" name="name" placeholder="请输入姓名">
      </div>
      <div class="input_box">
      <input type="text" name="age" placeholder="请输入年龄">
      </div>
      <button>添加 Add in...</button><br>

    </form>

    <p style="text-align: center;left:710px;position:fixed;bottom:10px;font-size:12px;color:rgb(192, 178, 178);">Copyright © 2024 prexiouswxe.Powered by fhq. 
      <br> All rights reserved.</p>
</body>
</html>
```

---

## 五、更新的html

```html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Update finaltask_student</title>
  <style>
    .background{
        position:fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("statics/R-C.jpg")no-repeat center center/cover;
        /*background-attachment: fixed;
        background-size: cover; /* 可选，用于确保背景图片覆盖整个屏幕 */
        /*background-repeat: no-repeat; /* 不重复 */
        /*background-position:  center center; /* 居中 */
        /*background-size: 100% 100%; /* 覆盖整个元素 */
        /*background-attachment: fixed;*/
        /*background-repeat:no-repeat;*/
        z-index: -1; /* 将 z-index 设置为负值，使背景图片位于内容下方 */
        }
    #login_box {
      width: 20%;
      height: 400px;
      background-color: #f8ededbc;
      margin: auto;
      margin-top: 10%;
      text-align: center;
      border-radius: 10px;
      padding: 50px 50px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    h2 {
      color: #efb1d1d3;
      margin-top: 5%;
    }

    #input-box {
      margin-top: 5%;
    }

    span {
      color: #fff;
    }

    input {
      border: 0;
      width: 60%;
      font-size: 15px;
      color: #fff;
      background: transparent;
      border-bottom: 2px solid #cdc1c1;  /*横线颜色*/
      padding: 5px 10px;
      outline: none;
      margin-top: 10px;
    }

    button {
      margin-top: 50px;
      width: 60%;
      height: 30px;
      border-radius: 10px;
      border: 0;
      color: #d0caca;
      text-align: center;
      line-height: 30px;
      font-size: 15px;
      background-image: linear-gradient(to right, #30cfd0, #330867);
    }

    #sign_up {
      margin-top: 45%;
      margin-left: 60%;
    }

    a {
      color: #d0bcbc;
    }
  </style>
</head>

<body>
    <div class="background"></div>
    <div id="login_box">
    <h2>Change Information</h2>

    <form action="/update" method="post" novalidate autocomplete="off">

      <span id="idDisplay" style="color:coral"></span>
      <p style="font-size: 12px;font-family: FangSong;color:rgb(133, 127, 124)">(学号作为主键不可修改)</p>

      <div class="input_box">
      <input type="text" name="name" placeholder="请输入新的姓名">
      </div>
      <div class="input_box">
      <input type="text" name="age" placeholder="请输入新的年龄">
      </div>

      <!-- 隐藏的 input 用于传递 ID -->
      <input type="hidden" name="id" id="studentId">

      <button>更新 deliver it...</button><br>

    </form>

    <script>
        // 获取 URL 中的参数
        const urlParams = new URLSearchParams(window.location.search);
        const id = urlParams.get('id');

        // 将获取到的 ID 显示在页面上
        document.getElementById('idDisplay').innerText = `学号为：${id}`;
        // 将 ID 设置到隐藏的 input 中，以便提交表单时一起传递
        document.getElementById('studentId').value = id;
    </script>


    <p style="text-align: center;left:710px;position:fixed;bottom:10px;font-size:12px;color:rgb(192, 178, 178);">Copyright © 2024 prexiouswxe.Powered by fhq. 
      <br> All rights reserved.</p>
</body>
</html>
```

---

## 六、静态文件们

```css
    .button {
    align-items: center;
    background-clip: padding-box;
    background-color: #fa6400;
    border: 1px solid transparent;
    border-radius: .25rem;
    box-shadow: rgba(0, 0, 0, 0.02) 0 1px 3px 0;
    box-sizing: border-box;
    color: #fff;
    cursor: pointer;

    font-family: system-ui,-apple-system,system-ui,"Helvetica Neue",Helvetica,Arial,sans-serif;
    font-size: 16px;
    font-weight: 600;
    justify-content: center;
    line-height: 1.25;
    margin: 0;
    min-height: 3rem;
    padding: calc(.875rem - 1px) calc(1.5rem - 1px);
    position: relative;
    text-decoration: none;
    transition: all 250ms;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    vertical-align: baseline;
    width: auto;

    display: inline-flex;
    justify-content: center; /* 水平居中排列 */
    /*align-items: center; /* 垂直居中排列 */
    }
    .button:hover,
    .button:focus {
    /*background-color: #c884d3;*/
    box-shadow: rgba(0, 0, 0, 0.1) 0 4px 12px;
    }

    .button:hover {
    transform: translateY(-1px);
    }

    .button:active {
    /*background-color: #d4a0e4;*/
    box-shadow: rgba(0, 0, 0, .06) 0 2px 4px;
    transform: translateY(0);
    }
```

还有一些图片放在仓库

---

## 七、终端

```terminal
PS D:\代码！> go run finaltask/main.go
successfully link![GIN] 2024/03/02 - 22:02:18 | 200 |      2.3485ms |       127.0.0.1 | GET      "/"
[GIN] 2024/03/02 - 22:02:18 | 304 |        83.4µs |       127.0.0.1 | GET      "/statics/R-C.jpg"
[GIN] 2024/03/02 - 22:02:22 | 200 |      1.5657ms |       127.0.0.1 | GET      "/question?query=12345"
[GIN] 2024/03/02 - 22:02:23 | 200 |       220.9µs |       127.0.0.1 | GET      "/update.html?id=12345"
[GIN] 2024/03/02 - 22:02:36 | 200 |       411.7µs |       127.0.0.1 | GET      "/update.html?id=12345"
[GIN] 2024/03/02 - 22:02:40 | 200 |       662.9µs |       127.0.0.1 | GET      "/update.html?id=88888"
[GIN] 2024/03/02 - 22:02:47 | 200 |           1ms |       127.0.0.1 | GET      "/question?query=12345"
[GIN] 2024/03/02 - 22:02:48 | 200 |       222.4µs |       127.0.0.1 | GET      "/update.html?id=12345"
接收到update请求
URL: /update
ID: 12345
Name: 茉莉奶绿
Age: 66
update success, affected rows:1
[GIN] 2024/03/02 - 22:02:55 | 302 |      7.6173ms |       127.0.0.1 | POST     "/update"
[GIN] 2024/03/02 - 22:02:55 | 200 |       900.4µs |       127.0.0.1 | GET      "/"
[GIN] 2024/03/02 - 22:03:02 | 200 |       1.241ms |       127.0.0.1 | GET      "/question?query=12345"
[GIN] 2024/03/02 - 22:03:03 | 200 |       354.3µs |       127.0.0.1 | GET      "/update.html?id=12345"
接收到update请求
URL: /update
ID: 12345
Name: 上山打老虎
Age: 99
update success, affected rows:1
[GIN] 2024/03/02 - 22:03:10 | 302 |      8.0443ms |       127.0.0.1 | POST     "/update"
[GIN] 2024/03/02 - 22:03:10 | 200 |      1.2585ms |       127.0.0.1 | GET      "/"
[GIN] 2024/03/02 - 22:03:46 | 200 |       686.7µs |       127.0.0.1 | GET      "/add.html"
insert success, the id is 55555.
[GIN] 2024/03/02 - 22:04:00 | 302 |      3.2829ms |       127.0.0.1 | POST     "/login"
[GIN] 2024/03/02 - 22:04:00 | 200 |       948.1µs |       127.0.0.1 | GET      "/"
[GIN] 2024/03/02 - 22:07:29 | 200 |      1.0367ms |       127.0.0.1 | GET      "/"
[GIN] 2024/03/02 - 22:07:30 | 200 |      1.1835ms |       127.0.0.1 | GET      "/"
[GIN] 2024/03/02 - 22:14:12 | 200 |      1.4188ms |       127.0.0.1 | GET      "/question?query=12345"
[GIN] 2024/03/02 - 22:14:33 | 200 |      1.0379ms |       127.0.0.1 | GET      "/update.html?id=12345"
[GIN] 2024/03/02 - 22:14:59 | 200 |            0s |      将要删除的学生ID为: 55555
delete success, affected rows: 1
[GIN] 2024/03/02 - 22:45:07 | 200 |     14.6497ms |       127.0.0.1 | POST     "/delete"
[GIN] 2024/03/02 - 22:45:07 | 200 |      2.2715ms |       127.0.0.1 | GET      "/" 127.0.0.1 | GET      "/add.html"
```
